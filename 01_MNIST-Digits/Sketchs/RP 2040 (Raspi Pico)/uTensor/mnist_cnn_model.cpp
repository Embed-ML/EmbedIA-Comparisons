/* Auto-generated by utensor cli */
#include "uTensor.h"
#include "params_mnist_cnn_model.hpp"
#include "mnist_cnn_model.hpp"


Mnist_cnn_model::Mnist_cnn_model () :
op_ReshapeOperator_000({ 1, 7 })
, op_QuantizeOperator_001()
, op_DequantizeOperator_002()
, op_DepthwiseSeparableConvOperator_003({ 1, 1 }, VALID, 7, { 1, 1 }, TFLM::TfLiteFusedActivation::kTfLiteActRelu)
, op_FullyConnectedOperator_004(TFLM::TfLiteFusedActivation::kTfLiteActNone)
, op_FullyConnectedOperator_005(TFLM::TfLiteFusedActivation::kTfLiteActRelu)
, op_MaxPoolOperator_006({ 2, 2 }, { 1, 2, 2, 1 }, VALID)
{
  Context::get_default_context()->set_ram_data_allocator(&ram_allocator);
  Context::get_default_context()->set_metadata_allocator(&metadata_allocator);
  // TODO: moving ROMTensor declarations here
}

void Mnist_cnn_model::compute()
{
  // update context in case there are multiple models being run
  Context::get_default_context()->set_ram_data_allocator(&ram_allocator);
  Context::get_default_context()->set_metadata_allocator(&metadata_allocator);
  // start rendering local snippets
  Tensor t_input_1_int80 = new RamTensor({ 1, 8, 8, 1 }, i8);
    int32_t t_input_1_int80_zp = -128;
    float t_input_1_int80_scale = 0.003921569;
    PerTensorQuantizationParams t_input_1_int80_quant_params(t_input_1_int80_zp, t_input_1_int80_scale);
    t_input_1_int80->set_quantization_params(t_input_1_int80_quant_params);


  op_QuantizeOperator_001
    .set_inputs({
        { TflmSymQuantOps::QuantizeOperator<int8_t, float>::input, inputs[input_0].tensor() },
    })
    .set_outputs({
        { TflmSymQuantOps::QuantizeOperator<int8_t, float>::output, t_input_1_int80}
    })
    .eval();

  Tensor t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0 = new RamTensor({ 1, 4, 4, 1 }, i8);
    int32_t t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_zp = -128;
    float t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_scale = 0.003921569;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_quant_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_zp, t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_scale);
    t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0->set_quantization_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0_quant_params);


  op_MaxPoolOperator_006
    .set_inputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::in, t_input_1_int80 },
    })
    .set_outputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::out, t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0}
    })
    .eval();

  t_input_1_int80.free();

  Tensor t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0 = new RomTensor({ 1, 3, 3, 7 }, i8, data_StatefulPartitionedCall_my_model_20_conv2d_20_Conv2D_ReadVariableOp_0);
    int32_t arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_zp[7] = { 0, 0, 0, 0, 0, 0, 0 };
    float arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_scale[7] = { 0.0021788073, 0.017471643, 0.017324245, 0.009619276, 0.008624104, 0.010594703, 0.007941571 };
    PerChannelQuantizationParams t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_quant_params(arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_zp, arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_scale);
    t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0->set_quantization_params(t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0_quant_params);


  Tensor t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0 = new RomTensor({ 7 }, i32, data_StatefulPartitionedCall_my_model_20_conv2d_20_Conv2D_bias_0);
    int32_t arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_zp[7] = { 0, 0, 0, 0, 0, 0, 0 };
    float arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_scale[7] = { 8.544343e-06, 6.851625e-05, 6.793822e-05, 3.7722653e-05, 3.382002e-05, 4.1547857e-05, 3.1143416e-05 };
    PerChannelQuantizationParams t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_quant_params(arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_zp, arr_t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_scale);
    t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0->set_quantization_params(t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0_quant_params);


  Tensor t_StatefulPartitionedCallmy_model_20conv2d_20Relu0 = new RamTensor({ 1, 2, 2, 7 }, i8);
    int32_t t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_zp = -128;
    float t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_scale = 0.008371697;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_quant_params(t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_zp, t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_scale);
    t_StatefulPartitionedCallmy_model_20conv2d_20Relu0->set_quantization_params(t_StatefulPartitionedCallmy_model_20conv2d_20Relu0_quant_params);


  op_DepthwiseSeparableConvOperator_003
    .set_inputs({
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::in, t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0 },
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::filter, t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0 },
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::bias, t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::out, t_StatefulPartitionedCallmy_model_20conv2d_20Relu0}
    })
    .eval();

  t_StatefulPartitionedCallmy_model_20conv2d_20Conv2D_bias0.free();

  t_StatefulPartitionedCallmy_model_20max_pooling2d_18MaxPool0.free();

  t_StatefulPartitionedCallmy_model_20conv2d_20Conv2DReadVariableOp0.free();

  Tensor t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0 = new RamTensor({ 1, 1, 1, 7 }, i8);
    int32_t t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_zp = -128;
    float t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_scale = 0.008371697;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_quant_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_zp, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_scale);
    t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0->set_quantization_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0_quant_params);


  op_MaxPoolOperator_006
    .set_inputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::in, t_StatefulPartitionedCallmy_model_20conv2d_20Relu0 },
    })
    .set_outputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::out, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0}
    })
    .eval();

  t_StatefulPartitionedCallmy_model_20conv2d_20Relu0.free();

  Tensor t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00 = new RamTensor({ 1, 7 }, i8);
    int32_t t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_zp = -128;
    float t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_scale = 0.008371697;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_quant_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_zp, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_scale);
    t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00->set_quantization_params(t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00_quant_params);


  op_ReshapeOperator_000
    .set_inputs({
        { ReferenceOperators::ReshapeOperator<int8_t>::input, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0 },
    })
    .set_outputs({
        { ReferenceOperators::ReshapeOperator<int8_t>::output, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00}
    })
    .eval();

  t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool0.free();

  Tensor t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0 = new RomTensor({ 7, 16 }, i8, data_StatefulPartitionedCall_my_model_20_dense_36_MatMul_ReadVariableOp_transpose_0);
    int32_t t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_zp = 0;
    float t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_scale = 0.01683194;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_quant_params(t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_zp, t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_scale);
    t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0->set_quantization_params(t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0_quant_params);


  Tensor t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0 = new RomTensor({ 16 }, i32, data_StatefulPartitionedCall_my_model_20_dense_36_MatMul_bias_0);
    int32_t t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_zp = 0;
    float t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_scale = 0.0001409119;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_quant_params(t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_zp, t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_scale);
    t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0->set_quantization_params(t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0_quant_params);


  Tensor t_StatefulPartitionedCallmy_model_20dense_36Relu0 = new RamTensor({ 1, 16 }, i8);
    int32_t t_StatefulPartitionedCallmy_model_20dense_36Relu0_zp = -128;
    float t_StatefulPartitionedCallmy_model_20dense_36Relu0_scale = 0.022955112;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20dense_36Relu0_quant_params(t_StatefulPartitionedCallmy_model_20dense_36Relu0_zp, t_StatefulPartitionedCallmy_model_20dense_36Relu0_scale);
    t_StatefulPartitionedCallmy_model_20dense_36Relu0->set_quantization_params(t_StatefulPartitionedCallmy_model_20dense_36Relu0_quant_params);


  op_FullyConnectedOperator_005
    .set_inputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::input, t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::filter, t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::bias, t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::output, t_StatefulPartitionedCallmy_model_20dense_36Relu0}
    })
    .eval();

  t_StatefulPartitionedCallmy_model_20max_pooling2d_18_1MaxPool_0_Reshape00.free();

  t_StatefulPartitionedCallmy_model_20dense_36MatMulReadVariableOptranspose0.free();

  t_StatefulPartitionedCallmy_model_20dense_36MatMul_bias0.free();

  Tensor t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0 = new RomTensor({ 16, 10 }, i8, data_StatefulPartitionedCall_my_model_20_dense_37_MatMul_ReadVariableOp_transpose_0);
    int32_t t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_zp = 0;
    float t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_scale = 0.044330917;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_quant_params(t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_zp, t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_scale);
    t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0->set_quantization_params(t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0_quant_params);


  Tensor t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0 = new RomTensor({ 10 }, i32, data_StatefulPartitionedCall_my_model_20_dense_37_MatMul_bias_0);
    int32_t t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_zp = 0;
    float t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_scale = 0.0010176211;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_quant_params(t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_zp, t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_scale);
    t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0->set_quantization_params(t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0_quant_params);


  Tensor t_Identity_int80 = new RamTensor({ 1, 10 }, i8);
    int32_t t_Identity_int80_zp = 70;
    float t_Identity_int80_scale = 0.22742373;
    PerTensorQuantizationParams t_Identity_int80_quant_params(t_Identity_int80_zp, t_Identity_int80_scale);
    t_Identity_int80->set_quantization_params(t_Identity_int80_quant_params);


  op_FullyConnectedOperator_004
    .set_inputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::input, t_StatefulPartitionedCallmy_model_20dense_36Relu0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::filter, t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::bias, t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::output, t_Identity_int80}
    })
    .eval();

  t_StatefulPartitionedCallmy_model_20dense_37MatMul_bias0.free();

  t_StatefulPartitionedCallmy_model_20dense_37MatMulReadVariableOptranspose0.free();

  t_StatefulPartitionedCallmy_model_20dense_36Relu0.free();

  op_DequantizeOperator_002
    .set_inputs({
        { TflmSymQuantOps::DequantizeOperator<float, int8_t>::a, t_Identity_int80 },
    })
    .set_outputs({
        { TflmSymQuantOps::DequantizeOperator<float, int8_t>::b, outputs[output_0].tensor()}
    })
    .eval();

  t_Identity_int80.free();
  // end of rendering local snippets
}